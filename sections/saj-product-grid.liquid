<div class="{{section.class}}" id="product-grid-{{ section.id }}">
    <div class="ny-container">
      <h2 class="ny-title">{{ section.settings.ny_title }}</h2>
      <div class="ny-product-grid">
        {% for product in section.settings.ny_product_list %} 
          
          {% assign selectedvariant = product.first_or_selected_variant %}
             <div class="ny-box" id="product-{{ product.id }}" data-product='{{ product | json }}'>
                <div class="ny-image-box">               
                        {% assign images = product.media | where: 'media_type', 'image' %}
                            {% for image in images limit : 1 %}
                            {{- image | image_url: width: 433 | image_tag }}
                            {% endfor %}
                        </div>
                <div class="ny-selection-box">
<div class="ny-close" style="text-align: right;">x</div>
<div class="ny-popup-grid">
  <div class="ny-popup-top">
    <div class="ny-popup-image">
        <img src="{{ product.featured_image | img_url: 'master' }}" width="120px" height="140px">
    </div>
    <div class="ny-popup-content">
        <h2>{{ product.title |  strip_html }}</h2>
        <p class="price">{{product.price | money_with_currency }}</p>
        <p class="desc">{{product.description |  strip_html }}</p>
    </div>
  </div>


<div class="ny-popup-form">
  {% form 'product', product %}



    {% if product.variants.size > 1 %}
          <div class="main-product-options">
            {% for option in product.options_with_values %}
              <div class="main-product-option">
                <div>{{ option.name }}</div>

                {% if option.name == 'Size' %}
                <div class="ny-accordion-toggle" id="size-toggle">
                  <span>Choose your size</span>
                  <span class="ny-accordion-icon">â–¼</span>
                </div>
                {% endif %}

                <div class="ny-field-{{ option.name }} main-product-option-radios {% if option.name == 'Size' %}ny-size-wrapper{% endif %}">
                  {% for value in option.values %}
                    <div {% if option.name == 'Color' %}style="background-color:{{ value }}"{% endif %} class="main-product-option-radio">
                      <input
                        {% if option.selected_value == value %}
                          checked
                        {% endif %}
                        type="radio"
                        name="{{ option.name }}"
                        value="{{ value }}"
                        class="product-option-select"
                        id="{{ option.name | handlize }}-{{ value | handlize }}"
                      >
                      <label class="button" for="{{ option.name | handlize }}-{{ value | handlize }}">
                        {{ value }}
                      </label>
                    </div>
                  {% endfor %}
                </div>
              </div>
            {% endfor %}
          </div>
        {% endif %}



      




  
  <input class="main-product-id hide" type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
  <input type="hidden" name="quantity" min="1" value="1">
  <input id="ny-submit" type="submit" value="ADD TO CART">

  {% endform %}

  </div>
</div>

                  
                </div>
             </div>
        {% endfor %}    
      </div>
    </div>
</div>

<style>
.ny-container{ max-width: 1337px; margin:auto;}
.ny-title{}
.ny-product-grid{display: grid;
    row-gap: 19px;
    column-gap: 19px;
    grid-template-columns: 433px 433px 433px}

/* Popup Box CSS*/    
.ny-selection-box{
  width: 333px;
    padding-right: 31px;
    padding-left: 31px;
    height: 447px;
    max-height: 447px;
    padding-bottom: 31px;
    display:none;
    background: #ffffff;
} 

.ny-selection-box.open{
  position: absolute;
    top: 20%;
    left: 38%;
    z-index: 3;
    display:block;
}
.ny-box{}
.ny-popup-image{    width: max-content;
margin-right: 17px;}
.ny-popup-content{width:50%;}
.ny-popup-content h2 {
font-family: Jost;
font-size: 16px;
font-weight: 300;
line-height: 19.2px;
text-align: left;
text-decoration-skip-ink: none;

}
.ny-popup-content .price {
  font-family: Lustria;
font-size: 16px;
font-weight: 400;
line-height: 19.2px;
text-align: left;
text-underline-position: from-font;
text-decoration-skip-ink: none;

}
.ny-popup-content .desc {
  font-family: Jost;
font-size: 14px;
font-weight: 300;
line-height: 15.4px;
letter-spacing: -0.01em;
text-align: left;
text-underline-position: from-font;
text-decoration-skip-ink: none;

}

.ny-popup-top{display:flex;max-height: 140px;}
#ny-submit{
  width: 100%;
    max-height: 45px;
    font-family: Jost;
    font-size: 16px;
    font-weight: 400;
    line-height: 20.48px;
    text-align: center;
    text-underline-position: from-font;
    text-decoration-skip-ink: none;
    color: #fff;
    background: #000;
    height: 45px;
}

.main-product-option-radio input{
  display:none;
}

.ny-field-Color{
   display:flex;
}
.ny-field-Color .main-product-option-radio label{
width: 50%;
height: 40px;
border: 0.5px 0px 0px 0px;
font-family: Jost;
font-size: 18px;
font-weight: 400;
line-height: 18px;
letter-spacing: -0.02em;
text-align: left;
text-underline-position: from-font;
text-decoration-skip-ink: none;
}
.ny-field-Color .main-product-option-radio {
    width: 50%;
    justify-content: end;
    display: flex;
}

.ny-accordion-icon{
  border-left: 0.5px solid #000000;
    height: 40px;
    width: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
}
.ny-accordion-toggle {
  height: 40.44px;
  border: 0.5px solid #000000;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fff;
  width: 100%;
  padding: 10px 0 10px 10px;
  cursor: pointer;
  font-size: 14px;
  margin-bottom: 54px;
}
.ny-field-Size label{
  width:100%;
}
.ny-field-Size .main-product-option-radio{
    height: 36px;
    display: flex;
    align-items: center;
}
.ny-size-wrapper {
  display: none;
  height: 99px;
  overflow: overlay;
}



input[type="radio"] {
  margin-right: 5px;
}
.ny-accordion-toggle.open{
  margin-bottom: 0px;
}
.ny-popup-form.open #ny-submit{
     display: none;
}
.ny-accordion-toggle.open .accordion-icon {
  transform: rotate(180deg);
}








@media screen (max-width:1439px) {
.ny-container{
    padding-right: 5%;
     padding-left: 5%;
    }
}
</style>    

<script>
  // Root container for the product grid
  var root = document.querySelector('#product-grid-{{ section.id }}');

// Loop through each product box
root.querySelectorAll('.ny-box').forEach(productBox => {
  // Parse the product JSON
  let productData = null;

  try {
    productData = JSON.parse(productBox.dataset.product);
  } catch (error) {
    console.error('Invalid JSON in data-product:', productBox.dataset.product, error);
    return; // Skip this product box
  }


  // Add event listener for radio buttons within the current product box
  productBox.querySelectorAll('.main-product-option input[type="radio"]').forEach(radio => {
    radio.addEventListener('change', () => {
      // Collect selected options within the current product box
      let selectedOptions = [];
      productBox.querySelectorAll('.main-product-option input[type="radio"]:checked').forEach(radio => {
        selectedOptions.push(radio.value);
      });

      // Find the matching variant
      let matchedVariant = productData.variants.find(variant => {
        return variant.options.every((option, index) => option === selectedOptions[index]);
      });

      if (matchedVariant) {
        // Update the hidden input with the new variant ID
        productBox.querySelector('.main-product-id').value = matchedVariant.id;

        // Optionally update other UI elements (price, image, etc.)
        productBox.querySelector('.ny-popup-content p:nth-child(2)').textContent = matchedVariant.price + ' USD';
      }
    });
  });
});

  
     document.querySelectorAll('.ny-box').forEach(productBox => {
      // Select Color and Size radios *within the current product box*
      const radioButtonsColor = productBox.querySelectorAll('input[name="Color"]');
      const radioButtonsSize = productBox.querySelectorAll('input[name="Size"]');
    
      // Function to handle radio button selection within the product box
      function handleRadioChange(radioGroup) {
        radioGroup.forEach(radio => {
          radio.addEventListener('change', function() {
            // Uncheck all radios in the current group (within the same product box)
            radioGroup.forEach(r => r.removeAttribute('checked',''));
    
            // Check the clicked radio button
            this.setAttribute('checked','');
          });
        });
      }
    
      // Apply scoped radio change logic to both groups
      handleRadioChange(radioButtonsColor);
      handleRadioChange(radioButtonsSize);
    });



  const addToCartForms = document.querySelectorAll('form[action="/cart/add"]');

addToCartForms.forEach((form) => {
  form.addEventListener("submit", async (event) => {
    // Prevent normal submission
    event.preventDefault();
 console.log(form)
    // Submit form with ajax
    await fetch("/cart/add", {
      method: "post",
      body: new FormData(form),
    });

    // Get new cart object
    const res = await fetch("/cart.json");
    console.log(res)
    const cart = await res.json();

    // Update cart count
    document.querySelectorAll(".cart-count").forEach((el) => {
      el.textContent = cart.item_count;
    });

    // Display message
    const message = document.createElement("p");
    message.classList.add("added-to-cart");
    message.textContent = "Added to cart!";
    form.appendChild(message);
  });
});



document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".ny-box").forEach(productBox => {
    const toggleButton = productBox.querySelector(".ny-accordion-toggle");
    const toggleForm = productBox.querySelector(".ny-popup-form");
    const accordionContent = productBox.querySelector(".ny-size-wrapper");

    toggleButton.addEventListener("click", () => {
      const isOpen = accordionContent.style.display === "block";

      // Toggle visibility of this product's accordion
      accordionContent.style.display = isOpen ? "none" : "block";

      // Toggle arrow direction
      toggleButton.classList.toggle("open", !isOpen);
      toggleForm.classList.toggle("open", !isOpen);
    });
  });
});

document.addEventListener("DOMContentLoaded", () => {
document.querySelectorAll('.ny-box').forEach(productBox => {
  const viewForm = productBox.querySelector(".ny-selection-box");
  const closeForm = productBox.querySelector(".ny-close");

    this.addEventListener("click", () => {
      const isFormOpen = viewForm.classList.toggle("open", !isFormOpen)
    })

    closeForm.addEventListener("click", () => {
      const isFormOpen = viewForm.classList.toggle("open", !isFormOpen)
    })


  })

});
</script>    
{% schema %}
{
  "name": "NY Product Grid",
  "tag": "section",
  "class": "section section-featured-product ny-container-wapper",
  "settings": [
    {
    "type": "text",
    "id": "ny_title",
    "label": "Heading",
    "default": "Tisso vison in the wild"
    },
    {
      "type": "header",
      "content": "Select the 6 products",
      "info": "These products will appear in the grid"
    },
    {
    "type": "product_list",
    "id": "ny_product_list",
    "label": "Products",
    "limit": 6
    }
  ],
  "presets": [
    {
      "name": "NY Product Grid"
    }
  ]
}
{% endschema %}